"""Utilities for generating groups based on Young Tableau symmetries"""
import functools
import itertools
import operator
from typing import List

from sympy.combinatorics import Permutation, PermutationGroup

from mathtools.comb.young import YoungTableau


def row_generators(yt: YoungTableau) -> List[Permutation]:
    """Get row generators for the Young Tableau

    Args:
        yt:
            YoungTableau

    Returns:
        list: list of Permutation
    """
    rows = yt.rows()
    gens = []
    for row in rows:
        for r1, r2 in itertools.combinations(row, 2):
            # Sort the pair
            if r1 > r2:
                r1, r2 = r2, r1
            # Add the permutation
            gens.append(Permutation(r1, r2))

    return gens


def fused_row_generators(yt: YoungTableau) -> List[Permutation]:
    """Get "fused" row generators for the Young Tableau. A fused row generator is a permutation that swaps two pairs of
    entire rows. Note that the rows must have the same length.

    Args:
        yt:

    Returns:

    """
    rows = yt.rows()
    gens = []
    for i in range(len(rows) - 1):
        for j in range(i + 1, len(rows)):
            if len(rows[i]) == len(rows[j]):
                element_pair_perms = [Permutation(ai, bi) for ai, bi in zip(rows[i], rows[j])]
                single_perm = functools.reduce(operator.mul, element_pair_perms)
                gens.append(single_perm)

    return gens


def fused_col_generators(yt: YoungTableau) -> List[Permutation]:
    """Get "fused" column generators for the Young Tableau. A fused column generator is a permutation that swaps two pairs of
    entire columns. Note that the columns must have the same length.

    Args:
        yt:

    Returns:

    """
    cols = yt.columns()
    gens = []
    for i in range(len(cols) - 1):
        for j in range(i + 1, len(cols)):
            if len(cols[i]) == len(cols[j]):
                element_pair_perms = [Permutation(ai, bi) for ai, bi in zip(cols[i], cols[j])]
                single_perm = functools.reduce(operator.mul, element_pair_perms)
                gens.append(single_perm)

    return gens


def col_generators(yt: YoungTableau) -> List[Permutation]:
    """Get column generators for the Young Tableau

    Args:
        yt:
            YoungTableau

    Returns:
        list: list of Permutation
    """
    cols = yt.columns()
    gens = []
    for col in cols:
        for c1, c2 in itertools.combinations(col, 2):
            # Sort the pair
            if c1 > c2:
                c1, c2 = c2, c1
            # Add the permutation
            gens.append(Permutation(c1, c2))

    return gens


def generators(yt: YoungTableau, include_rows: bool = True, include_cols: bool = True, include_fused_rows: bool = False, include_fused_cols: bool = False) -> List[Permutation]:
    """Get generators for the Young Tableau

    Args:
        yt:
            YoungTableau
        include_rows:
            bool, include row generators
        include_cols:
            bool, include column generators

    Returns:
        list: list of Permutation
    """
    perms = []

    if include_rows:
        perms += row_generators(yt)

    if include_fused_rows:
        perms += fused_row_generators(yt)

    if include_cols:
        perms += col_generators(yt)

    if include_fused_cols:
        perms += fused_col_generators(yt)

    return perms


def group(yt: YoungTableau, include_rows: bool = True, include_cols: bool = True, include_fused_rows: bool = False, include_fused_cols: bool = False) -> List[Permutation]:
    """Get the group generated by the Young Tableau

    Args:
        yt:
            YoungTableau
        include_rows:
            bool, include row generators
        include_cols:
            bool, include column generators

    Returns:
        list: list of Permutation
    """
    return PermutationGroup(generators(yt, include_rows=include_rows, include_cols=include_cols, include_fused_rows=include_fused_rows, include_fused_cols=include_fused_cols))
